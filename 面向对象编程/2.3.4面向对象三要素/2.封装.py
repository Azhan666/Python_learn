# !/usr/bin/env python
# -*- coding: utf-8 -*-
# 写在前面：
# 封装就是将类的成员变量、成员函数整合在一起，并对关键的信息进行保护或隐藏。Python的信息保护
# 或隐藏分为公有、保护和私有三个级别，下面对这三个级别进行讲解。

# 1.以英文字母开头的成员为公有成员，对类外部的代码均可见。
# 2.以一个下划线开头的成员为保护成员，对类外部的代码均不可见，但对派生类可见。
# 3.以两个下划线开头的成员为私有成员，对类外部及派生类都不可见。

class A:
    def __init__(self, a, b, c):
        self.a = a # 公有属性
        self._b = b # 保护属性
        self.__c = c # 私有属性
    def x(self):
        print('公有方法')
    def _y(self):
        print('保护方法')
    def __z(self):
        print('私有方法')

a = A(1, 2, 3)
a.a
print(a.a)
a._b
print(a._b)
# a.__c
# print(a.__c)

a.x()

a._y()

a.__z()

# 以上代码在类A中分别定义了三个级别的属性和方法。测试发现，私有成员的访问受到了限制，但是
# 保护成员在类外部依然可以访问。原来，在Python的OOP中，保护成员和公有成员没有任何区别，保
# 护规则仅在使用星号(*)导入模块的特殊情况下有效。
