# !/usr/bin/env python
# -*- coding: utf-8 -*-
# 写在前面:
# 虽然这里讲解的是format()函数，以前，大多数情况下，我更喜欢使用%来实现C语言风格的格式化输出。
# 但是我现在更喜欢用format()来实现格式化输出。可以通过下面的例子体会一下这两种格式化方法的
# 差异。

# 用format()格式化:
Y,M,D,h,m,s = 2019,5,1,8,0,0 # 2019年5月1日8时0分0秒
'{:04d}-{:02d}-{:02d} {:02d}:{:02d}:{:02d}'.format(Y,M,D,h,m,s)
print(Y,M,D,h,m,s)

# 用%格式化:
'%04d-%02d-%02d %02d:%02d:%02d'%(Y,M,D,h,m,s)
print(Y,M,D,h,m,s)

# 下面列出的是format()函数的常用格式化符号。

# {:.2f}  :四舍五入，保留小数点后两位
# {:+.2f} :四舍五入，保留小数点后两位,带符号
# {:0>2d} :整数左侧补0,总长度为2
# {:X<4d} :整数右侧补X,总长度为4
# {:,}    :为整数增加逗号分隔符
# {:.2%}  :百分比格式化，保留小数点后两位
# {:.2e}  :科学计数法，保留小数点后两位
# {:>10d} :长度10以内右对齐
# {:<10d} :长度10以内左对齐
# {:^10d} :长度10以内居中对齐
# {:b}    :转为2进制 binary system：二进制
# {:#b}   :转为带前缀0b的二进制
# {:o}    :转为八进制 Octal System：八进制
# {:#o}   :转为带前缀0o的八进制
# {:x}    :转为十六进制 hexadecimal system：十六进制
# {:#x}   :转为带前缀0x的十六进制
# {:#X}   :转为带前缀0X的十六进制

# 下面列出的是用%实现格式化字符串输出的常用符号。

# %d或%i  ：转为带符号的十进制形式的整数
# %o      ：转为带符号的八进制形式的整数
# %x或%X  : 转为带符号的十六进制形式的整数
# %e或%E  : 转为科学计数法表示的浮点数
# %f或%F  : 转为十进制形式的浮点数
# %g或%G  : 智能选择使用%f/%F或%e/%E格式
# %c      ：格式化字符及其ASCII码
# %r      ：使用repr()将变量或表达式转为字符串
# %s      ：使用str()将变量或表达式转为字符串
