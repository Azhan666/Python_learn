# !/usr/bin/env python
# -*- coding: utf-8 -*-

""" 4.2 创建数组"""

""" 
    一般情况下,科学数据都是海量的、层次关系复杂的,由数据服务机构提供,不是个人构造出来的,创建数组在很
多情况下是用来做原型验证和算法验证的, NumPy为创建数组提供了非常丰富的手段,可以无中生有,可以移花接木,还可以
举一反三,配合数据类型设置、结构设置.可以创建出任何形式的数组。
    基于工作经验,我把创建数组的方法分成了创建简单数组和创建复杂数组两大类。其实简单数组和复杂数组并没
有严格的分界线,大致上, “无中生有”创建出来的数组称为简单数组，如蛮力构造法、特殊数值法、随机数值法和
定长分割法等；通过“移花接木”“举一反三"创建出来的数组称为复杂数组,如重复构造法、网格构造法等。

    4.2.1 蛮力构造法
    蛮力构造法使用np.array()函数来创建数组，其原型如下："""

# import numpy as np
#
# np.array(object, dtype=None, copy=True, order=None, subok=False, ndmin=0) # oredr：数组在内存中的存储顺序

"""
    该函数的参数看上去挺多,但固定参数(必要参数)只有一个object,也就是和我们要创建的数组相似的
(array_like)数据结构,通常是Python列表或元组,下面的例子使用一个列表创建数组,如果改成元组也完全符合规则。
"""
# a = np.array([[1,2,3],[4,5,6]]) # 创建2行3列数组
# print(a)
# # [[1 2 3]
# #  [4 5 6]]
# print(a.dtype)
# # int32

""" 在np.array()函数的默认参数中，dtype参数用于指定数据类型，创建数组时，如果不指定数据类型，np.array
()函数会跟据object参数自动选择合适的数据类型。当然，也可以像下面代码中演示的这样，在创建数组时，指定元
素的数据类型。"""

# a = np.array([[1,2,3],[4,5,6]], dtype=np.uint8) # 创建8位无符号整型数组
# print(a)
# [[1 2 3]
#  [4 5 6]]

""" 蛮力构造法就是将想要创建数组的数据结构直接用Python列表或元组写出来，再用np.array()函数转为数组，
这个方法虽然看起来简单，但很容易出错，不适合创建体量较大的数组。"""

""" 4.2.2 特殊值法
    这里的特殊值法指的是0、1、空值。特殊值法适合构造全0、全1、空数组，或由0、1组成的类似单位矩阵
（主对角线为1，其余为0）的数组。特殊值法使用的4个函数原型如下："""

# np.zeros(shape, dtype=float, order='C')
# np.ones(shape, dtype=float, order='C')
# np.empty(shape, dtype=float, order='C')
# np.eye(N, M=None, k=0, dtype=float, order='C')

""" 固定参数shape表示生成的数组结构，默认参数dtype用于指定数据类型（默认浮点型）。虽然order参数几乎用
不到，但作为常识，我们有必要了解一下。order参数指定的是数组在内存中的存储顺序，“C”表示C语言使用的行优先
方式，“F”代表Fortran语言使用的列优先方式。
    使用上面4个函数配合shape和dtype残数，可以很方便的创建出一些简单数组，其代码如下："""

# print(np.zeros(6)) # 全零数组 全零矩阵
# [0. 0. 0. 0. 0. 0.]
# print(np.zeros((2,3))) # 二维数组
# [[0. 0. 0.]
#  [0. 0. 0.]]
# print(np.ones((2,3),dtype=np.int))
# 元素的默认数据类型为float。 这就是数组中1.的原因。
# 数据类型改为了int，没有了点：
# [[1 1 1]
#  [1 1 1]]
# print(np.empty((2,3)))
# [[1.22383816e-307 1.37959129e-306 1.33511969e-306]
#  [1.24611266e-306 2.11382017e-307 1.37961981e-306]]
# print(np.eye(3, dtype=np.uint8))
# [[1 0 0]
#  [0 1 0]
#  [0 0 1]]

"""
    如果需要一个3行4列、初始值都是255的无符号整型数组,应该怎么做呢?全1数组乘以255,或全0数组加255,都是很
好的解决方案。另外,使用填充函数fill()也可以解决这个问题, fill()函数不只可以填充空数组,任何数组都可以使
用它来填充固定的值,其代码如下。"""

# import numpy as np
#
# a = np.empty((3,4), dtype=np.uint8)
# a.fill(255) # fill:填充
# print(a)
# [[255 255 255 255]
#  [255 255 255 255]
#  [255 255 255 255]]

""" 4.2.3 随机数值法
    
    和Python的标准模块random类似, NumPy有一个random子模块,其功能更加强大用随机数值法创建数组主要就是
使用random子模块。random子模块的方法很多,这里只介绍3个最常用的函数,本章的最后一节还会详细讲解这个子模
块。这3个最常用的函数原型如下。"""

# import numpy as np
#
# np.random.random(size=None)
# np.random.randint(low, high=None, size=None)
# np.random.normal(loc=0.0, scale=1.0, size=None)

""" 
    random()函数用于生成[0,1)区间内的随机浮点型数组, randint()函数用于生成[low, high)区间内的随机
整型数组。参数size是一个元组,用于指定生成数组的结构,其代码如下。请注意,这里描述的[0,1)区间和
[low, high)区间都是左闭右开的。"""

# import numpy as np

# print(np.random.random(3))
# [0.77351871 0.30245671 0.93896206]
# print(np.random.random((2,3)))
# [[0.21150119 0.3052721  0.84987341]
#  [0.87304473 0.70617224 0.78578017]]
# print(np.random.randint(5))
# 2
# print(np.random.randint(1,5, size=(2,3))) # 随机生成[1,5)范围内的2行3列的数组
# [[3 1 1]
#  [4 2 4]]

"""
    normal()函数用于生成以loc为均值、以scale为标准差的正态分布数组。下面用正态分布函数模拟生成1000位
成年男性的身高数据(假定成年男性平均身高为170厘米,标准差为4厘米),并画出图44所示的柱状图(这里提前用到了
第5章的内容,算是预演吧)。normal:正常，scale：规模，比例"""

# import matplotlib.pyplot as plt, numpy as np# 导入绘图模块
#
# tall = np.random.normal(170, 4, 1000) # 生成正态分布数据
# bins = np.arange(156, 190, 2) # 从156厘米到190厘米，每隔2厘米一个分段
# # print(tall, bins)
# plt.hist(tall, bins) # 绘制柱状图
# plt.show() # 显示图形

# module 'matplotlib' has no attribute 'verbose'解决：
# https://blog.csdn.net/tterminator/article/details/95311469
# （在Python集成工具里面把在窗口显示图形打勾取消。）

""" 4.2.4 定长分割法

    定长分割法最常用的函数是arange(),它看起来和Python的range()函数很像,只是前面多了一个字母a。另一个
常用的定长分割函数是linspace(),类似于arange()函数,但功能更加强大,两个函数的原型如下。
"""
'''import numpy as np
np.arange(start, stop, step, dtype=None) # step:步骤 台阶 脚步(分段间隔)
np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)
# linspace:线性等分向量 线性平分矢量 线性平分向量 构造线性分布的向量
# endpoint：端点 终结点 终端 终点

    arange()函数和Python的range()函数用法相同，并且还可以接收浮点型参数，其代码如下：'''

# import numpy as np
#
# print(np.arange(5))
# # [0 1 2 3 4]
# print(np.arange(5, 11))
# # [ 5  6  7  8  9 10]
# print(np.arange(5.5, 11, 1.5)) # 5.5~11之间，每隔1.5一个分段
# # [ 5.5  7.   8.5 10. ]
# print(np.arange(3,15).reshape(3,4)) # 3层4行
# # [[ 3  4  5  6]
# #  [ 7  8  9 10]
# #  [11 12 13 14]]

""" linspace()函数需要3个参数：一个起点、一个终点、一个返回元素个数。linspace()函数返回的元素
包括起点和终点，我们可以通过endpoint参数选择是否包含终点，其代码如下："""

# import numpy as np
#
# print(np.linspace(0, 5, 5)) # 返回0~5之间的5个等距数值，包括0和5
# # [0.   1.25 2.5  3.75 5.  ]
# print(np.linspace(0, 5, 5, endpoint=False)) # 返回0~5之间的5个等距数值，包括0但不包括5
# # [0. 1. 2. 3. 4.]

""" 4.2.5 重复构造法
    重复构造法，顾名思义就是根据特定的规则对已有的数组不断重复，从而生成新的数组。重复构造法主要
使用repeat()和tile()这两个函数。
    一般而言，repeat()函数用来重复数组元素。但如果被重复的数组是一个多维数组，且repeat()函数指定
了axis参数，情况就会变得有些复杂，其代码如下：axis:轴"""

# import numpy as np
#
# a = np.arange(5)
# print(a)
# print(np.repeat(a, 3)) # 重复一维数组元素3次
# # [0 1 2 3 4]
# # [0 0 0 1 1 1 2 2 2 3 3 3 4 4 4]
#
# a = np.arange(6).reshape((2,3))
# print(a)
# # [[0 1 2]
# #  [3 4 5]]
# print(np.repeat(a, 3)) # 重复2维数组元素3次，不指定轴
# # [0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5]
# print(np.repeat(a, 3, axis=0)) # 重复2维数组元素3次，指定0轴
# # [[0 1 2]
# #  [0 1 2]
# #  [0 1 2]
# #  [3 4 5]
# #  [3 4 5]
# #  [3 4 5]]
# print(np.repeat(a, 3, axis=1)) # 重复2维数组元素3次，指定1轴
# # [[0 0 0 1 1 1 2 2 2]
# #  [3 3 3 4 4 4 5 5 5]]

""" tile的原意是铺地砖或贴墙砖，总之是把一块一块的地砖或墙砖，一排排一列列地排列整齐。tile()函数
也是如此，它将整个数组而非数组元素水平和垂直重复指定的次数。因为没有axis参数，所以tile()函数相对
容易理解，其代码如下："""
# import numpy as np
#
# a = np.arange(5)
# print(a)
# # [0 1 2 3 4]
# print(np.tile(a, 3)) # 重复一维数组3次
# # [0 1 2 3 4 0 1 2 3 4 0 1 2 3 4]
# print(np.tile(a, (3,2))) # 重复一维数组3行2列
# # [[0 1 2 3 4 0 1 2 3 4]
# #  [0 1 2 3 4 0 1 2 3 4]
# #  [0 1 2 3 4 0 1 2 3 4]]
# a = np.arange(6).reshape((2,3))
# print(a)
# # [[0 1 2]
# #  [3 4 5]]
# print(np.tile(a, 3)) # 重复二维数组3次
# [[0 1 2 0 1 2 0 1 2]
#  [3 4 5 3 4 5 3 4 5]]
# [[0 1 2 0 1 2 0 1 2]
# print(np.tile(a, (2,3))) # 重复二维数组2行3列
# [[0 1 2 3 4 0 1 2 3 4 0 1 2 3 4]
#  [0 1 2 3 4 0 1 2 3 4 0 1 2 3 4]]

""" 4.2.6 网格构造法"""

""" 众所周知研究地球表面需要经纬度坐标，经度从西经180°（-180°）到经180°（180°），维度从北纬
90°（90°）到南纬90°（-90°），把经纬度线画出来，就形成了一个经纬度网格，经纬度网格是科学数据中
常用的概念。通常用longitude表示，简写为lon,纬度用latitude表示，简写为lat。那么，如何用数组表
示经纬度网格呢？
    用数组表示经纬度网格一般有两种方式。第一种方式，用两个一维数组表示。下面的代码使用定长分割
函数linspace(),将经度从-180°到180°分为间隔为10°的37个点，将纬度从90°到-90°分为间隔为10°的19
个点，得到两个一维数组。"""

# import numpy as np
#
# lon = np.linspace(-180, 180, 37) # 精度为10°，共计37个经度点
# lat = np.linspace(90, -90, 19) # 精度为10°，共计19个纬度点
#
# """ 经度网格的第二种表示方式是用两个二维数组分别表示经度网格和纬度网格。经度网格中每一列的元素
# 都是相同的（同一个经度），纬度网格中每一行的元素都是相同的（同一个纬度）。"""
#
# lons,lats = np.meshgrid(lon, lat) # meshgrid:用于三维曲面的分格线座标；产生“格点”矩阵
# print(lons.shape) # shape:形状
# # (19, 37)
# print(lats.shape)
# # (19, 37)
# print(lons[:,0]) # 列表切片：：切片符号，“，”：以逗号分隔，0:从头开始取
# # [-180. -180. -180. -180. -180. -180. -180. -180. -180. -180. -180. -180.
# #  -180. -180. -180. -180. -180. -180. -180.]
#
# print(lats[0]) # 从头开始取
# # [90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90.
# #  90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90. 90.
# #  90.]

""" 从上面的代码可以看出，二维经度数组lons的第0列所有元素都是-180°，二维纬度数组lats的第0行
所有元素都是90°。
    构造经纬度网格，除了使用np.meshrid()函数外，还有一个更强大的方法，这个方法可以直接生成纬
度网格和经度网格而无需借助一维数组（请注意，纬度在前，经度在后）。"""

# import numpy as np
#
# lats, lons = np.mgrid[90:-91:-5, -180:181:5] # 用实数指定网格精度为5°
# print(lons.shape, lats.shape)
# # (37, 73) (37, 73)
#
# lats, lons = np.mgrid[90:-90:37j, -180:180:73j] # 也可以用虚数指定分割点数
# print(lons.shape, lats.shape)
# # (37, 73) (37, 73)
#
# """ 上面的例子中用到了虚数，相应构造复数的方法如下："""
#
# # 虚数复数：https://www.runoob.com/w3cnote/python-complex-intro.html
# r, i = 2, 5
# print(complex(r,i))
# # (2+5j)

""" 4.2.7 自定义数据类型

    在讲解数据类型时已经说过，NumPy也支持字符串类型和自定义类型，但绝大多数函数和方法不适用
于非数值型数组，因此，自定义数据类型将是最后的选择。
    我们先来思考一个问题：同一个列表中，元素类型既有字符串，又有整型和浮点型，将该列表转为数组，
会报错吗？如果不报错，数组的数据类型又是什么呢？下面用一个例子演示一下，其代码如下："""

import numpy as np

# print(np.array(['Anne', 1.70, 55]).dtype)
# # <U32
""" 结果显示，数组会将所有元素的数据类型都转为'<U32'类型。这里U表示Unicode字符串，<表示字节顺
序，意为小端在前（低位字节存储在最小地址中）；32表示数组元素占用32字节，数组元素占用的字节数由所
有元素中最长的那个元素决定。
    接下来我们继续思考：怎样在数组中保留用以生成数组的列表中的元素类型呢？这就需要用到自定义数据
类型了。自定义数据类型类似于C语言的结构体，其代码如下："""

mytype = np.dtype([('name','S32'), ('tall', np.float16), ('bw',np.int0)])
print(np.array([('Anne', 1.70, 55)], dtype=mytype), mytype)
# [(b'Anne', 1.7, 55)]
# [('name', 'S32'), ('tall', '<f2'), ('bw', '<i8')]


































