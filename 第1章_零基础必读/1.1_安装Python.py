# !/usr/bin/env python
# -*- coding: utf-8 -*-

"""1.1.1 Python的各种发行版"""

""" 
    Python有多种发行版,其中最有影响力的是官方的CPython版本。我们平时所说的Python,如果没有特别
说明,就是指CPython, CPython利用C语言编写而成,是最具广泛兼容性与标准化的Pyhon实现方案。
    值得一提的是, CPython解释器有一个替代品PyPy,其可以利用即时编译(JIT)来加速Python程序的执行,
PyPy JIT将Python代码编译为机器语言,从而带来平均7.7倍于CPython的运行速度。在某些特定任务中,其提
速效果可达50倍。一般情况下, Python代码都可以不加修改地在PyPy环境下运行,但不能保证和CPython环境
下的运行结果完全一致。毕竟, PyPy在垃圾回收机制等方面完全不同于CPython。
    Anaconda是影响力仅次于CPython的另一个发行版,Anaconda基于CPython,集成了大量常用的Python模
块,尤其是数据科学类的模块。Anaconda还提供了一套模块管理工具,可以构建多个相互独立的开发环境。
    早期的Python语言一直缺少一个方便易用的模块安装及管理工具,模块资源也极为匮乏模块的安装和升级
曾经是非常令人头疼的大问题。在这个背景下,以提供模块管理服务为特点的Anaconda得以大行其道。现在, 
Python有了pip这样的模块安装和管理利器, Anaconda的优势自然就不存在了。我个人认为Anaconda的模块
管理和开发环境管理,非但没有让事情变得简单,反而给初学者带来了更多的困惑。当然,这只是我的个人观点,
如果你确实喜欢使用Anaconda,我也完全认同并尊重你的选择。
    除了Anaconda,其他的Python发行版基本上都是针对某一种编程语言设计的运行时(Runtime),如基于
JVM的Jython、基于.net的IronPython等。不过, Jython和IronPython 目前都没有推出Py3的版本。

    1.1.2安装与运行
    首先从Python的官方网站下载安装程序。下载时,读者需要根据自己的操作系统类型、硬件参数等信息选
择合适的版本。如果是出于学习的目的,下载任何一个版本都没有问题;如果是用于工作项目,则需要考虑项目
所依赖的第三方模块是否支持最新版本的Python。
    以在Windows平台安装Python为例,下载完安装程序,运行时会出现图1-1所示的安装提示。推荐使用默认
方式安装,同时不要忘记勾选界面最下面的两个复选框,否则可能会给后后续的使用和模块维护带来一些麻烦。

    安装完成后,可以在Windows开始菜单的Python程序组中看到IDLE应用程序。这是Python内置的集成开发
工具,既可以交互式运行代码,也可以编辑、运行Python的脚本文件。
本书的大部分代码都是以交互方式在IDLE上运行的. IDLE的运行界面如图1-2所示。

    在Python的程序组中还有一个工具(工具名为Python),它可以直接运行Python解释器类似于在一个命令行
窗口中运行python.exe程序。在这个工具的窗口中,只能以交互方式运行Python语句,不能运行脚本文件。我
习惯把这个工具叫作Shell,不过, Python的开发者们把Shell这个名字写在了IDLE程序界面的标题栏上。

    1.1.3重新安装
    如果Python解释器损坏或需要一个更高版本的解释器,就需要卸载当前版本的Python,安装新版本的Python
,而不是像大多数软件那样可以直接升级到最新版本。这是因为Python的第三方模块大多都依赖特定版本的
Python解释器,如果升级Python解释器,将会导致所有依赖当前版本Python解释器的第三方模块不可用。
"""