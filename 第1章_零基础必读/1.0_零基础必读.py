# !/usr/bin/env python
# -*- coding: utf-8 -*-
"""第1章，零基础必读"""

""" 
Now is better than never,
Although never is often better than right now.
    
    这是"Python之禅”中的一句话,意思是做也许好过不做,但不假思索就动手,还不如不做。的确,在开始学习
Python之前,初学者需要先了解一些关于这门编程语言的背景知识。并在计算机上做好准备工作。
    关于Python,很多教科书都把它定义为动态的、强类型的编程语言,作为初学者,大可不必深究什么是动态语
言,什么是强类型语言,但必须知道的是, Python是支持面向对象编程的脚本语言,同时也原生支持面向过程式编
程的范式。
    这里,我绝非有意搬出面向对象和面向过程式编程的概念来给初学者一个下马威,而是因为这两个概念对于
程序员来说非常重要,即便是新手也要有所了解。所谓面向过程式编程,就是根据解决问题所需要的步骤,用函数
一步一步实现,最后依次调用这些函数,面向过程式编程符合人类的思维特点,容易理解,而面向对象编程就要比
它抽象复杂得多。如果初学者理解面向对象编程有困难,也不用急于求成。很多概念都是在长期的编程实践中逐
步建立起来的切都是自然而然的。
    此外,初学者还需要知道, Python是脚本语言。与脚本语言相对的是编译型语言,如C语言和C++语言都属于
编译型语言。编译型语言需要经过编译器编译连接之后才能运行,而脚本语言的运行则需要一个解释器而非编译
器。我们常说在计算机上安装了某一个版本的Python，指的就是Python的解释器。初学者往往搞不清楚解释器
和编译器分别是什么,甚至把集成开发工具理解为解释器或编译器。请务必记住, Python解释器就是一个可执行
程序,运行Python代玛就是在运行Python解释器,这个解释器将逐行解释、执行代码。
"""