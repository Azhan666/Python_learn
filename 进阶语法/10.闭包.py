# !/usr/bin/env python
# -*- coding: utf-8 -*-
# 2.2.10 闭包
# 写在前面：
# 作为一种编程语言特性，闭包得到了很多编程语言的支持，Python语言也不例外。在Python语言中，闭包
# 指的是携带一个或多个自由量的函数。闭包函数的自由量不是函数的参数，而是生成这个函数时的环境变量。
# 闭包一旦生成，自由量会绑定在函数上，即使离开创造他的环境，自由量依然有效。总结一下，闭包的概念
# 有以下三个要点：

# 1.闭包是一个函数。
# 2.闭包函数是由其他代码生成的。
# 3.闭包函数携带了生成环境的信息。

# 有一个很好的例子可以帮助初学者理解闭包。我们知道，几乎所有的计算机模块（如math）提供的对数函数
# 只能计算以2为底、以e为底、和以10为底的三种对数。

import math3
math3.log(math3.e) # 返回以e为底e的对数
print(math3.log(math3.e))

math3.log2(4) # 返回以2为底4的对数
print(math3.log2(4))

math3.log10(1000) # 返回以10为底1000的对数
print(math3.log10(1000))

def glog(b, a): # 返回以a为底b的对数
    return math3.log(b)/math3.log(a)

glog(25, 5) # 返回以5为底25的对数
print(glog(25, 5))

# 如果想要计算以a为底b的对数，则需要使用如下对数换底公式：
# logab=__logeb___
#         logea
# 我们固然可以像上面的例子那样定义一个函数glog()，来计算以任意数为底的对数，但每次总要输
# 入两个参数，这和math模块的log()、log2()、log10()函数风格不一致。如果使用闭包，就能制造出
# 和math模块风格一致的对数函数，其代码如下：

def log_factory(n): # 定义一个对数函数生成器
    def log_n(x): # 生成闭包
        return math3.log(x)/math3.log(n) # 闭包中携带了环境参数n
    return log_n # 返回闭包

log5 = log_factory(5) # 用闭包生成器生成闭包函数
log7 = log_factory(7) # 用闭包生成器生成闭包函数
log5(25) # 该闭包携带的自由量是5
print(log5(25))

log7(49) # 该闭包携带的自由量是7
print(log7(49))

# 以上代码首先设计一个对数函数生成器log_factory(),每输入一个整数n就返回一个以n为底的对数函数。
# 继而用这个生成器生成了两个闭包函数，一个名为log5，一个名为log7。最后验证一下，一切都和前面
# 所讲的完全一样。

